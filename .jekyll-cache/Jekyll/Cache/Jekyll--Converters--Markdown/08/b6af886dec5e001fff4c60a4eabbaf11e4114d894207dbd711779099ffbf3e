I"⁄"<p>This post explores a few different approaches to music generation with deep learning.</p>

<!--more-->

<h2 id="part-1---single-step-feedforward-learning">Part 1 - Single Step Feedforward Learning</h2>

<p>These architectures do not ingest music one step at a time, but rather ingest a chunk all at once. While straightforward, a major limitation of this method is that it‚Äôs difficult to produce musical phrases of variable length. It‚Äôd be like deciding ahead of time how many words are allowed in each sentence.</p>

<h3 id="11---introduction-with-bach">1.1 - Introduction with Bach</h3>

<p>For the first example, we‚Äôll walk through a very simple and intuitive deep learning setup. Here are the parameters:</p>

<ol>
  <li><strong>Music Structure</strong> - 4 measures of SATB in 4/4 time</li>
  <li><strong>ML Architecture</strong> - Feedforward neural network with 1 hidden layer</li>
  <li><strong>Input</strong> - (One hot encoding for pitch at each time step) x number of input voices</li>
  <li><strong>Output</strong> - (One hot encoding for pitch at each time step) x number of output voices</li>
  <li><strong>Training Data</strong> - Bach chorales, with each voice extracted and transposed into all keys.</li>
</ol>

<p>Even before we consider the musical merit of any generated output, we can notice that there will be intrinsic limitations to this method. First, it is deterministic. For each unique input there will only ever be 1 output. Maybe this ok for something like this, but what if our input was a chord progression and our desired ouput was a melody? Many different melodies are possible for the same progression. Here we run into our first challenge - how can we generate a wide variety of content from limited inputs? (<em>creatio ex-nihilo</em> and content variability)</p>

<p>The next two examples are ways around this issue.</p>

<h3 id="12---encoderdecoder">1.2 - Encoder/Decoder</h3>

<p>The basic idea here is to first train an autoencoder, which if you remember, learns the important ‚Äúfeatures‚Äù in its hidden layer. To generate unique outputs, we simply turn this around - the hidden layer becomes the input (i.e. a seed). The seed is fed-forward through the decoder, and we get a unique output. Of course this is still deterministic, but it overcomes the <em>creatio ex-nihilo</em> issue. (Technically we‚Äôre not starting from <em>true nothing</em>, but then what does? Most randomly generated content, like a minecraft world, starts from a seed anyway).</p>

<blockquote>
  <p>The DeepHear system by Sun uses this approach to generate ragtime music. They use Scott Joplin songs as the training data, and a stacked autoencoder with a hidden layer size of 16. Due to the small size of this hidden layer, there is a high amount of plagiarism (around 60%).</p>
</blockquote>

<h2 id="part-2---sequential-models">Part 2 - Sequential Models</h2>

<p>These architectures treat the data sequentially. Once advantage of structuring a model this way is that you can produce music of variable length. Most are implemented with some kind of RNN.</p>

<h3 id="21---a-basic-rnn-with-lstm">2.1 - A Basic RNN with LSTM</h3>

<p>An example of this sequential approach was implemented by Eck and Schmidhuber in their 12 bar blues program. The input and output layer both have 25 nodes (13 for notes and 12 for chords) with a hidden layer of eight LSTM blocks. The hidden layer connections are as follows:</p>

<ol>
  <li>Chord block is fully connected to everything in the input and the chord output.</li>
  <li>Melody block is fully connected to everything in the input, and melody output.</li>
  <li>Chord block is recursive with itself and melody.</li>
  <li>Melody block is recursive only with itself.</li>
</ol>

<p>The asymmetric architecture is used to control the dependency of chords and melody. In this case, the chords are dependent on the melody, but not vice-versa.</p>

<h3 id="22---bi-directional-lstm-for-accompaniment">2.2 - Bi-Directional LSTM for Accompaniment</h3>

<p>A Bi-directional RNN uses data from both before and after the target timestep to make predictions. This makes sense when generating music, since motifs or themes are often repeated.</p>

<p>One such way to use a BLSTM is to generate a progression of chords as an accompaniment to a melody.</p>

<ul>
  <li>Input encoding: one-hot for each of 12 pitches</li>
  <li>Output encoding: one-hot for each minor and major triad of 12 pitches (24 total)</li>
</ul>

<h3 id="23---rnnrbm-polyphany-generation">2.3 - RNN/RBM Polyphany Generation</h3>

<p>Ok, we‚Äôve introduced a few architectures, but we haven‚Äôt really factored in anything about music yet. Music theory offers many ideas through which we can understand the structure and shape of songs, so why not incoporate them into our architecture?</p>

<p>To begin, let‚Äôs start with the basic differentiation of melody and harmony. From a music theory perspective, there are two dimensions to a song: the vertical and the horizontal. Vertical is the pairing of melody with harmony, while horizontal is the change from one time step to the next.</p>

<p>The idea of a coupled RNN-RBM is to cover both of these aspects:</p>
<ul>
  <li>The RNN generates content in the horizontal dimension</li>
  <li>The RBM models the probability distribution of melody/chord pairs in the vertical dimension.</li>
</ul>

<p>This strategy designs an archictecture based on an understanding of music theory (i.e. that melody and harmony support each other). In this way, it is unique to some of the other strategies that have been outlined, which begin from other perspectives.</p>

<p class="message">

Question for you: if music has two dimensions, that makes it just like an image right? Why can't we just apply existing image-based AI algorithms to a piano roll?

The surprisingly intuitive answer is that in music (and unlike in images), the vertical and horizontal dimensions are not equivalent. In a picture, both dimensions are length, but in a piano roll, one dimension is pitch and the other is time. 

That being said, Convolutional Neural Networks - which have been very effective for image processing - are not useless for music generation... we just have to find creative ways to apply it.

</p>

<h3 id="24---rnnrnn-polyphany-generation">2.4 - RNN/RNN Polyphany Generation</h3>

<p>This is nearly identical to the architecture in example 7, but the vertical dimension is modeled by another RNN, instead of an RBM.</p>

<blockquote>
  <p>For an example of this implementation, see the Bi-Axial LSTM archicture proposed by Daniel Johnson ‚ÄúGenerating Polyphonic music using tied parallel networks‚Äù (2017).</p>
</blockquote>

<h2 id="part-3---hybrid-approaches">Part 3 - Hybrid Approaches</h2>

<p>Although RNN‚Äôs are great for sequential data, music actually tends to have a bit more structure than language. Songs are not one monolithic piece from start to finish, but rather are organized into sections, often with recurring motifs (e.g. AABA, Sonata, Etude, etc.).</p>

<p>This kind of repeating structure is actually really well captured by things like convolutional neural networks or encoders. So can we get the best of both worlds by using both a sequential and single-step architecture?</p>

<h3 id="31---variational-recurrent-autoencoder">3.1 - Variational Recurrent Autoencoder</h3>

<p>Often, structure is intentionally withheld from music writing AI‚Äôs because it‚Äôs very difficult to learn high level structures simultaneously with low-level harmony and melodic style.</p>

<p>MusicVAE is a variational recurrent autoencoder with a 2-level heirarchical RNN within the decoder. The introduction of an additional level improves the algorithm‚Äôs ability to learn structure. This allows it to generate longer sequences of music with better overall cohesion.</p>

<p>The first level within the hierarchy deals with low level concepts, like a musical phrase, while the second (higher) level deals with musical structure. (Technically, there is nothing that forces this association, but the hope is that by designing the archicture this way, the network will also learn this concept when it is trained).</p>

<h2 id="part-4---miscellaneous">Part 4 - Miscellaneous</h2>

<h3 id="41---style-transfer">4.1 - Style Transfer</h3>

<p>Style transfer is an active field of image processing, but hasn‚Äôt been explored very much in music. Musicians do this all the time in real life, (e.g. rearranging a pop song into a waltz, copying a jazz pianists style, or remixing a song into lo-fi). Conceptually, we can think about two types of style transfer:</p>

<ol>
  <li>Composition structure (e.g. time signature, song structure)</li>
  <li>Performance style (e.g. different style of harmony, embellishments. Think how different jazz pianists can approach the same standard in dramatically different ways)</li>
</ol>

<h3 id="conclusion">Conclusion</h3>

:ET