I"º<p>In the frontend post, we explored React and how to build a dynamic website with it. Now letâ€™s focus on developing a full stack application, using React for the frontend, and AWS to support the backend.</p>

<h3 id="overview">Overview</h3>

<p>Lets begin by discussing the pieces of our project. Thereâ€™s a lot of different tools required to make this whole thing work.</p>

<h4 id="1-react-code">1. React Code</h4>

<p>This is the javascript code that makes up the frontend. A bundling tool is usually used to turn the React code you write into the final scripts that your browser will run.</p>

<h4 id="2-aws-s3-bucket">2. AWS S3 Bucket</h4>

<p>This is a file hosting service that weâ€™ll use to store our React Code. When a user tries to access our website, theyâ€™ll be sent the react code stored in S3 (technically actually the build version, not the source React scripts).</p>

<h4 id="3-aws-route-53">3. AWS Route 53</h4>

<p>This is a DNS service that connects the human readable domain name (e.g. www.coolwebsite.com), to the actual machine readable IP address (194.34.25445).</p>

<h4 id="4-aws-cloudfront">4. AWS Cloudfront</h4>

<p>This is an optional service, but recommended. Cloudfront is a content delivery network, which gives you more options and control in how users access your website. One feature that Cloudfront enables is HTTPS instead of HTTP (the S stands for secure).</p>

<h4 id="5-aws-dynamodb">5. AWS DynamoDB</h4>

<p>A noSQL database service. This is the primary repository for user data. Databases provide a nice way to manage and read from large datasets. The benefit of using an AWS database is that it is managed for us. All we have to take care of is our data structure.</p>

<h4 id="6-api">6. API</h4>

<p>Since weâ€™re using a database service, weâ€™ll need an API to fetch/write data from/to the database. In other words, it is like the doorway connecting our frontend to our backend. Our React frontend will use this API to connect a userâ€™s interactions with data in our database. For this project, Iâ€™m going to use REST since I have a pretty basic application, but GraphQL is a popular alternative.</p>

<h4 id="7-aws-lambda">7. AWS Lambda</h4>

<p>This is an optional component. If we are only making simple read/write requests to our database, we can skip this. However, if we need complex functions, we can use AWS Lambda. AWS Lambda is a serverless compute service, which runs a function based on a trigger. This provides a nice way to code more complex processes.</p>

<p class="message">
There's another AWS tool called AWS amplify which helps you quickly setup a website. It's worth noting that all it does is basically set up the aforementioned resources for you. In other words, it's not a fundamental service, but rather a tool to help setup other services. If you know what you're doing, this is a very handy tool, but if you're new I recommend building everything from scratch. This will help you learn and also avoid suprise fees. 
</p>
:ET