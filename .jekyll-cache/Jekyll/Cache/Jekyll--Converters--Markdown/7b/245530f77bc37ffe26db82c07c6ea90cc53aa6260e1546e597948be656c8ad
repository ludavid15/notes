I"ñ<p>In the 1980‚Äôs, the field of systems engineering emerged from a slowing aerospace industry. Driven by new demands for safety and reliability, engineers formalized a process to sustain highly complex projects that have no budget for failure.</p>

<!--more-->

<h3 id="requirements">Requirements</h3>

<p>Requirements have been the backbone of aerospace systems engineering for a few decades now. The basic idea is that we write down a complete list of everything our project needs to do, and then break them down piece by piece. The idea is sound, but the execution gets messy very quickly, and is more art than science.</p>

<p>Let‚Äôs consider an example. Say we are trying to design a rocketship to Mars. We might define a few high level requirements that read:</p>

<ol>
  <li>The rocket shall carry 4 astronauts</li>
  <li>The rocket shall be able to complete the mission in 2 years.</li>
  <li>The rocket shall use electric propulsion systems.</li>
</ol>

<p>Taking the first requirement, we can break it down logically into necessary components. This process then gets repeated over and over until we reach a good level of detail, or more likely, until we can‚Äôt be bothered to keep going.</p>

<ol>
  <li>The rocket shall include a life support system to recycle oxygen.</li>
  <li>The rocket shall include 5000 cubic feet of living space for the astronauts.</li>
  <li>The rocket shall carry 3000 lbs of food and living equipment.</li>
</ol>

<p>Once all the requirements have been written, design work begins. The engineers build the rocketship exactly to spec, ahead of schedule and under budget, and then we fly to Mars. Err, ok maybe not. Before we launch we need to validate and verify that everything is good to go.</p>

<h3 id="validation-and-verification">Validation and Verification</h3>

<p>The process of ensuring the design meets the expectation is known as the validation and verification step. <strong>Verification</strong> checks to see that the design satisfies the exact wording of the requirement. For example, we can measure the interior space of our rocket, and if we find that there is indeed 5000 cubic feet, we have verified that requirement. <strong>Validation</strong> checks that we‚Äôre meeting the spirit of the requirement. In this case, the intent of this requirement is to provide astronauts with enough living space, but is 5000 really enough? What if the 5000 cubic feet is in the form of a 1 ft x 1 ft x 5000 ft narrow tube? Such a design would not meet the intent of the requirement, even though technically it satisfied the exact wording.</p>

<h4 id="why-requirements">Why Requirements?</h4>

<p>My personal opinion of requirements is that they exist as a document of wants, agreed upon by the stakeholders. If I want or need A, I‚Äôll go to you, we can talk it over, and we write this down into our requirements document.</p>

<p>This may be a good way to track our needs, (potentially comparable to ‚Äúuser stories‚Äù from agile), but it is not a very good way to organize a project.</p>

<h3 id="model-based-systems-engineering">Model Based Systems Engineering</h3>

<p>With better computers, engineers have increasingly turned to model based systems engineering, or MBSE as a solution to the engineering process. After all, things like CAD, CFD, and FEM have enabled us to model complex physics, so why not create a program to model a project?</p>

<p>The goal of model based systems engineering is to improve upon two things that happen very slowly with traditional requirements documents:</p>

<ol>
  <li>A way to track the design baseline.</li>
  <li>Once a change is made, an easy way to explore how it impacts other systems.</li>
</ol>

<p>So what aspects of a system can we model? Here‚Äôs a list.</p>

<ol>
  <li>Physical Configuration</li>
  <li>Function/Behavior</li>
  <li>Interactions</li>
  <li>Heirarchies/Definitions</li>
</ol>

<h4 id="physical-configuration">Physical Configuration</h4>

<p>Fairly straightfoward, we need to track the hardware, physical connectors, and physical properties (shape, weight, thermal resistence, etc.). If our project was a sentence, the physical configuration would be the subject.</p>

<h4 id="functionbehavior">Function/Behavior</h4>

<p>Verbs. Things that happen. You could say that function is the first thing we choose. Hardware is designed to meet a function, not the other way around.</p>

<blockquote>
  <p>Technically this isn‚Äôt always true. When a heritage (proven) piece of hardware is selected, it‚Äôs function is already defined, and then engineers build the rest of the system around it.</p>
</blockquote>

<h4 id="interactions">Interactions</h4>

<p>Interactions can be very abstract, but are also very important. A function might include an interaction, (i.e. a satellite interacts with a ground station by sending telemetry), but a physical configuration might also include an interaction (i.e. the baseplate on a satellite draws heat away from the electronics).</p>

<h4 id="definitions">Definitions</h4>

<p>We create words to group stuff together. If many pieces of hardware work together to provide telemetry, we might designate a ‚Äútelemetry subsystem‚Äù. These abstractions are an important part of communicating complex ideas, but also get messy.</p>

<h3 id="engineering-in-practice">Engineering in Practice</h3>

<p>In real life, we often do not build things up from scratch. Instead a project is often an addition to, or a modification of something that already exists. Even though this is meant to simplify the process, it also creates a lot of additional work (as anyone who has tried to read someone else‚Äôs code can testify). For this reason, it makes a lot of sense to develop systems engineering practices with this in mind.</p>

<h3 id="dodaf">DoDAF</h3>

<p>The Department of Defense Architecture Framework is an effort to generalize how we explain complex systems. Before getting into what DodAF is, let‚Äôs be clear that DoDAF is NOT model based systems engineering. DoDAF only defines a set of ‚Äúviewpoints‚Äù, which each viewpoint showing a different aspect of the system. For example, systems viewpoint 4 (SV4) shows functional flow diagrams, while SV1‚Äôs show a high level overview of the physical elements.</p>

<p>Consider an analogy - in CAD, we build 3D shapes. When we try to represent them on a 2D screen, we must choose a viewing angle and projection, but there are likely some standard views that everyone expects. Maybe a cross section to show the internal structure, or a profile view if it‚Äôs a flat plate. DoDAF is no different.
| DoDAF Views   | Explanation
| SV-1          | High level hardware overview
| SV-2          | Detailed hardware overview
| SV-4          | Functional flow diagram
| SV-10         | States and Modes transitions</p>

:ET