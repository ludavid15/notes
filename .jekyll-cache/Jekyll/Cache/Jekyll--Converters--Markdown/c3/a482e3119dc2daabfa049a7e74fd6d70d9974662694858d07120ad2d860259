I"{<p>This post takes a deeper look at variational auto encoders (VAE). Like regular auto encoders, a VAE maps a large dimension onto a small set of latent variables, from which we can reconstruct something very close to the original input. However, unlike regular auto encoders, a VAE uses a probability distribution in the latent space.</p>

<!--more-->

<h3 id="auto-encoders">Auto Encoders</h3>

<p>Before getting into what a VAE is, let’s make a stop along the way to discuss some applications of auto encoders. At the most basic level, an AE compresses your input. But if we feed it different types of input, we can change the question being asked. For instance, what if we applied gaussian noise to the input before providing it to the AE, but still asked it to return a noiseless image? Such an auto encoder is trained to become a “de-noising” auto encoder.</p>

<p>We could also feed it input where we’ve covered up different pixels. An auto encoder trained on this data set would learn how to generate new content to fill those missing regions. This is called nueral inpainting.</p>

<h3 id="the-variational-in-vae">The “Variational” in VAE</h3>

<p>This word comes from a family of techniques for estimating intractable integrals called Variational Bayesian Methods. One such intractable integral is known as the <em>posterior probability</em>. I recommend checking out this <a href="/notes/bayes">post</a> on Bayes Theorem for more information. A lot of that math is going to be very important in understanding how a VAE is constructed.</p>

<blockquote>
  <p>An intractable integral is one that cannot feasibly be computed in a reasonable amount of time.</p>
</blockquote>

<h3 id="variational-vs-regular-auto-encoders">Variational vs Regular Auto Encoders</h3>

<p>Let’s think for a moment about what really sets these two apart. We’ve introduced a VAE as basically a regular auto encoder, but instead we use a probality/normal distribution instead of explicit variables in the latent space. This might seem like a small change, but it has big implications.</p>

<p>With explicit variables, we are finding a single number, or set of numbers. But there’s no requirement that the latent space around these values are smooth. We could be constructing a patchwork of steep mountains and deep valleys. In fact, this is very likely, since typically we just optimize for the reconstruction loss.</p>

<p>But with a normal distribution, we’re now searching for a more “regular” set of latent variables. We’re not looking for a single value anymore, we’re trying to fit a <em>whole distribution</em>. In other words, you can think of this as a <em>normalized</em> version of the regular auto encoder. If your latent space as a whole is more smooth, you can interpolate more confidently within that space and still produce reasonable outputs from the decoder.</p>

<h3 id="log-probabilities">Log Probabilities</h3>

<p>One more math concept to introduce - a log probability is just the logarithm of a probability. The advantage of a log probability is that we can add instead of multiply. Recall that the probabilities of independent events multiply with one another.</p>

<h3 id="kl-divergence">KL Divergence</h3>

<p>KL Divergence is a measure of the difference between two probability distributions.</p>

\[KL(p\| q) = -\sum_{}^{} p(x) log(q(x)) + \sum_{}^{}  p(x) log(p(x))\]

\[KL(p\| q) = \sum_{}^{}  p(x) log \frac{p(x)}{q(x)}\]

<p>Based on the equations above, we can deduce two facts about the KL divergence. First, it is always greater than zero. Second, it is not symmetric, i.e. the KL divergence of <em>p</em> with respect to <em>q</em> is not the same as the KL divergence of <em>q</em> with respect to <em>p</em>.</p>

<h3 id="the-latent-probability-distribution">The Latent Probability Distribution</h3>

<p>As we’ve mentioned, a variational auto encoder uses a probability distribution for the latent dimensions. This is implemented as a vector of means, and a vector of standard deviations. When we go to the decoder, we can sample a latent vector from these distributions. Thus this process is <em>not</em> deterministic (and hints at why VAE’s are considered a type of generative network).</p>

<p>Mathematically, we’d like to maximize the probability that we re-produce input <em>x</em> given the distributions in the latent dimension. Let’s define the latent representation as <strong>z</strong> and the distribution of <strong>z</strong> as <strong>p(z)</strong>.</p>

<p>Our probabilistic decoder can be defined by <strong>p(x|z)</strong> or the distribution/liklihood of <strong>x</strong> given <strong>z</strong>. The opposite of that, our probabilistic encoder can be defined by <strong>p(z|x)</strong>, or the distribution/liklihood of our latent variables given the input. Using Bayes Theorem, we can relate all of these together as:</p>

\[p(z|x) = \frac{p(x|z)p(z)}{p(x)}\]

<h3 id="loss-function">Loss Function</h3>

<p>The loss function for a VAE network consists of two pieces. The first is the reconstruction loss. This is a measure of how accurately we reproduce the input. The second is called the KL divergence term or distance loss. This pushes the distribution towards a normal guassian distribution, of mean zero and standard deviation one. We can think of this second term as a regularization term.</p>

<h3 id="reparametrization-trick">Reparametrization Trick</h3>

<p>In the middle of our VAE, we used a sampling step to get from our learned distribution to a vector of latent variables to be input to our decoder. Unfortunately, this is an operation we cannot take the gradient of, which gets in the way when we try to perform gradient descent.</p>

<p>The solution is to parametrize this step into two steps, one that is differentiable, and another that is stochastic but fixed.</p>

<h3 id="disentangled-vae">Disentangled VAE</h3>

<p>One common problem of neural network is that they tend to function a bit like a black box. How they arrive at a particular answer is often a bit of a mystery. To this end, a new type of VAE which addresses this problem is called a disentangled VAE. The basic principle behind a disentangled VAE is that it adds one additional hyper parameter to the cost function, which pushes the dimensions within the latent space to be independent of one another.</p>

<p>When dimensions are uncorrellated, it is easier to understand what aspect each dimension captures. To use a linear algebra analogy, this is like finding the principle directions or eigenvectors of your space.</p>

<h3 id="further-reading">Further Reading</h3>

<p>If you’ve mastered all the content on this page, I recommend tackling diffusion models next. The underlying math is very similar.</p>
:ET